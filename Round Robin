#include <stdio.h>

// Define a structure to represent each process
struct Process {
    int processID;
    int arrivalTime;
    int burstTime;
    int remainingBurstTime;
    int turnaroundTime;
    int waitingTime;
};

// Function to calculate average turnaround time and average waiting time
void calculateAverageTimes(struct Process processes[], int n, float *avgTurnaroundTime, float *avgWaitingTime) {
    int totalTurnaroundTime = 0, totalWaitingTime = 0;
    for (int i = 0; i < n; i++) {
        totalTurnaroundTime += processes[i].turnaroundTime;
        totalWaitingTime += processes[i].waitingTime;
    }
    *avgTurnaroundTime = (float)totalTurnaroundTime / n;
    *avgWaitingTime = (float)totalWaitingTime / n;
}

int main() {
    int n, timeQuantum, currentTime = 0;
    float avgTurnaroundTime, avgWaitingTime;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    
    struct Process processes[n];

    // Input processes data
    for (int i = 0; i < n; i++) {
        printf("Enter arrival time and burst time for process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrivalTime, &processes[i].burstTime);
        processes[i].processID = i + 1;
        processes[i].remainingBurstTime = processes[i].burstTime;
    }

    // Input time quantum
    printf("Enter time quantum for Round Robin: ");
    scanf("%d", &timeQuantum);

    // Implement Round Robin scheduling
    int completedProcesses = 0;
    while (completedProcesses < n) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remainingBurstTime > 0) {
                if (processes[i].remainingBurstTime <= timeQuantum) {
                    currentTime += processes[i].remainingBurstTime;
                    processes[i].remainingBurstTime = 0;
                    processes[i].turnaroundTime = currentTime - processes[i].arrivalTime;
                    processes[i].waitingTime = processes[i].turnaroundTime - processes[i].burstTime;
                    completedProcesses++;
                } else {
                    currentTime += timeQuantum;
                    processes[i].remainingBurstTime -= timeQuantum;
                }
            }
        }
    }

    // Calculate average turnaround time and average waiting time
    calculateAverageTimes(processes, n, &avgTurnaroundTime, &avgWaitingTime);

    // Display results
    printf("\nProcess\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\n", processes[i].processID, processes[i].turnaroundTime, processes[i].waitingTime);
    }
    printf("Average Turnaround Time: %.2f\n", avgTurnaroundTime);
    printf("Average Waiting Time: %.2f\n", avgWaitingTime);

    return 0;
}
